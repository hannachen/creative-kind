'use strict';

var theme = function ($) {

  var $themeCarousel = $('.theme-carousel');

  function _init() {

    if ($themeCarousel.length > 0) {

      var $input = $($themeCarousel.data('target')),
          $themes = $themeCarousel.find('.theme'),
          $selectedTheme = $('.selected-theme');

      // Carousel options
      var options = {};
      options.mobileFirst = true;

      // Set active theme, either from input or theme
      if (_.isEmpty($input.val())) {
        $themeCarousel.on('init', function (e, slick) {
          setActiveTheme($input, $selectedTheme, $themes.get(slick.currentSlide));
        });
      } else {
        options.initialSlide = $themes.index($themes.filter('[data-id=' + $input.val() + ']'));
      }

      $themeCarousel.on('beforeChange', function (e, slick, currentSlide, nextSlide) {
        setActiveTheme($input, $selectedTheme, $themes.get(nextSlide));
      });
      $themeCarousel.slick(options);

      initEvents();
    }
  }

  function initEvents() {

    // TODO: only admin/owner of quilt can use this feature
    $('.theme-form').on('submit', function (e) {
      e.preventDefault();
      var form = e.currentTarget,
          actionUrl = form.getAttribute('action'),
          formData = utils.seralizeObject(form);
      $.ajax(actionUrl, {
        type: 'post',
        data: formData,
        statusCode: {
          200: function _() {
            location.reload();
          },
          404: function _() {
            alert('Error saving theme');
          }
        }
      });
    });
  }

  function setActiveTheme($input, $selectedTheme, currentTheme) {
    var themeId = currentTheme.getAttribute('data-id'),
        themeName = currentTheme.getAttribute('data-name');
    console.log(themeName, themeId);
    $input.val(themeId);
    $selectedTheme.text(themeName);
    console.log('CURRENT THEME', currentTheme);
  }

  return {
    init: function init() {
      _init();
    },
    deinit: function deinit() {}
  };
}(jQuery);
'use strict';

var sharePatch = function ($) {

  var $patchActions = $('.patch-actions');
  var $flashModal = $('#flash-modal');

  function _init() {
    // Check for patch action contents
    if ($patchActions.length) {

      initEvents();

      // Check for flash message modal
      if ($flashModal.length) {

        // Prepare contents for download and shares
        var $modalActions = $patchActions.clone();
        $modalActions.append('<button class="btn" data-dismiss="modal">Skip</button>');

        // Append patch data to modal
        $modalActions.appendTo($flashModal.find('.modal-footer'));
      }
    }
  }

  function initEvents() {
    $patchActions.find('.social-link a').on('click', onShare);
  }

  function onShare(e) {
    e.preventDefault();

    var $patchActions = function $patchActions() {
      document.getElementById('shareBtn').onclick = function () {
        FB.ui({
          method: 'share',
          display: 'popup',
          href: 'https://developers.facebook.com/docs/'
        }, function (response) {});
      };
    };
  }

  return {
    init: function init() {
      _init();
    },
    deinit: function deinit() {}
  };
}(jQuery);
'use strict';

var invite = function ($) {

  var $inviteInput = $('#invite-field'),
      emails = [];

  function _init() {

    if ($inviteInput.length > 0) {
      $inviteInput.tokenfield({
        delimiter: [',', ' ', "\n", "\r"],
        minLength: 3,
        limit: 5,
        inputType: 'email',
        createTokensOnBlur: true
      });
      initEvents();
    }
  }

  function onTokenfieldInit() {
    $inviteInput.data('bs.tokenfield').$input.addClass('validate');
  }

  function onCreateToken(e) {
    clearInput();
    var inputValue = getTokenValue(e);
    if (!utils.validateEmail(inputValue)) {
      $inviteInput.closest('.tokenfield').addClass('invalid');
      $inviteInput.data('bs.tokenfield').$input.addClass('invalid');
      return false;
    }
  }

  function onCreatedToken(e) {
    var inputValue = getTokenValue(e);
    emails.push(inputValue);
    console.log(emails);
    clearInput();
  }

  function clearInput() {
    $inviteInput.closest('.tokenfield').removeClass('invalid');
    $inviteInput.data('bs.tokenfield').$input.removeClass('invalid');
  }

  function onEditToken(e) {
    if (e.attrs.label !== e.attrs.value) {
      var label = e.attrs.label.split(' (');
      e.attrs.value = label[0] + '|' + e.attrs.value;
    }
  }

  function onRemovedToken(e) {
    var inputValue = getTokenValue(e);
    _.remove(emails, function (email) {
      return email === inputValue;
    });
    alert('Token removed! Token value was: ' + e.attrs.value);
  }

  function getTokenValue(e) {
    var data = e.attrs.value.split('|');
    return data[1] || data[0];
  }

  function initEvents() {
    $inviteInput.on('tokenfield:initialize', onTokenfieldInit).on('tokenfield:createtoken', onCreateToken).on('tokenfield:createdtoken', onCreatedToken).on('tokenfield:edittoken', onEditToken).on('tokenfield:removedtoken', onRemovedToken);
  }

  return {
    init: function init() {
      _init();
    },
    deinit: function deinit() {}
  };
}(jQuery);
'use strict';

var create = function ($) {

  var $createQuiltForm = $('#create-quilt-form');

  function _init() {

    console.log('create init', $createQuiltForm);

    if ($createQuiltForm.length > 0) {

      initEvents();
    }
  }

  function initEvents() {

    $createQuiltForm.on('submit', function (e) {
      e.preventDefault();
      var form = e.currentTarget,
          actionUrl = form.getAttribute('action'),
          formData = utils.seralizeObject(form);
      $.ajax(actionUrl, {
        type: 'post',
        data: formData,
        statusCode: {
          200: function _(data) {
            window.location.replace('/quilts/view/' + data.quiltId);
          },
          404: function _() {
            alert("page not found");
          }
        }
      });
    });
  }

  return {
    init: function init() {
      _init();
    },
    deinit: function deinit() {}
  };
}(jQuery);
'use strict';

var quiltCanvas = function ($) {

  var options = {
    showDonationModal: false
  };

  var $loginModal = $('#login-modal').modal('close'),
      $donationModal = $('#donation-modal').modal('close'),
      $confirmationModal = $('#confirmation-modal').modal('close'),
      $loginInviteModal = $('#login-invite-modal').modal('close'),
      $alertModal = $('#alert-modal').modal('close'),
      $quiltArea = $('#grid-area');

  var containerEl,
      quiltData,
      userData,
      quiltId,
      newPatch,
      grid,
      patchStatus,
      myPatch = '',
      user = {};

  function _init() {
    if ($quiltArea.length) {
      initVariables();
      setupCanvas();
      initEvents();
    }
  }

  function initVariables() {
    // Dom selects
    containerEl = document.getElementById('canvas-container');
    quiltData = document.getElementById('quilt-data');
    userData = document.getElementById('user-data');
    quiltId = containerEl.getAttribute('data-quilt-id') || '';
    newPatch = quiltData.getAttribute('data-new-patch') || '';

    if (quiltData) {
      var quiltDataString = quiltData.innerHTML;
    }
    if (quiltDataString) {
      patchStatus = JSON.parse(quiltDataString);
      _.forEach(patchStatus, function (patch) {
        if (patch.status === 'mine') {
          myPatch = patch.uid;
        }
      });
    }
    if (userData) {
      var userDataString = userData.innerHTML.trim();
      if (!_.isEmpty(userDataString)) {
        console.log(userDataString);
        try {
          user = JSON.parse(userDataString);
        } catch (e) {
          user = userDataString;
        }
      }
    }
  }

  function initEvents() {
    $(document).on('click-patch', function (e) {
      var patchData = e.patch,
          targetUrl = '/quilts/view/' + quiltId + '/' + patchData.uid;

      if (_.isEmpty(user)) {
        if (patchData.status === 'new') {
          $loginModal.find('.signin-link').attr('href', '/account/login/?cb=' + targetUrl);
          $loginModal.find('.signup-link').attr('href', '/account/signup/?cb=' + targetUrl);
          $loginModal.modal('show');
        }
      } else {
        targetUrl = '/patch/edit/' + patchData.uid;
        if (patchData.status === 'mine') {
          window.location.href = targetUrl;
        } else if (patchData.status === 'new') {
          if (myPatch.length) {
            $alertModal.modal('show');
          } else {
            targetUrl = '/patch/start/' + patchData.uid;
            $confirmationModal.modal('show');
            // Show modal based on feature toggle
            if (options.showDonationModal) {
              $donationModal.find('.btn-secondary').on('click', function () {
                window.location.href = targetUrl;
              });
            } else {
              // Go straight to patch if donation toggle is turned off
              $confirmationModal.find('.btn-primary').off('click').on('click', function () {
                window.location.href = targetUrl;
              });
            }
          }
        }
      }
    });

    // Login prompt for invited users
    if (_.isEmpty(user)) {
      $loginInviteModal.modal('show');
    }
  }

  function setupCanvas() {
    // Setup directly from canvas id:
    paper.setup('grid-area');

    // Add grid SVG
    project.importSVG('/img/quilt-grid.svg', {
      expandShapes: false,
      onLoad: onSvgLoaded
    });
    view.draw();

    // Setup viewport events
    viewportEvents();
  }

  function onSvgLoaded(svg) {
    fitToContainer(svg);
    grid = svg;

    var quiltModule = new Quilt(svg, quiltId, patchStatus);

    console.log('NEW PATCH', newPatch);
    if (newPatch && newPatch.length) {
      var patchData = {
        uid: newPatch,
        status: 'new'
      };
      console.log('HELLO', newPatch);
      quiltModule.emitClickEvent(patchData);
    }
  }

  function htmlEncode(value) {
    //create a in-memory div, set it's inner text(which jQuery automatically encodes)
    //then grab the encoded contents back out.  The div never exists on the page.
    return $('<div/>').text(value).html();
  }

  function htmlDecode(value) {
    return $('<div/>').html(value).text();
  }

  function fitToContainer(item) {
    var width = item.bounds.x + item.bounds.width,
        height = item.bounds.y + item.bounds.height,
        scale = getContainerW() / width,
        newPosX = getContainerW() / 2,
        newPosY = height * scale / 2;

    item.scale(scale);
    item.position = [newPosX, newPosY];
    view.draw();
  }

  function viewportEvents() {
    setViewport();
    window.onresize = function () {
      setViewport();
      fitToContainer(grid);
    };
  }

  function setViewport() {
    var width = getContainerW(),
        height = getContainerH(),
        size = new Size(width, height);

    // Update paper size
    view.viewSize = size;
  }

  /**
   * Get container width in box sizing mode.
   *
   * @returns {number}
   */
  function getContainerW() {
    var computedStyle = getComputedStyle(containerEl),
        containerWidth = containerEl.clientWidth;

    containerWidth -= parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);
    containerWidth -= parseFloat(computedStyle.marginLeft) + parseFloat(computedStyle.marginRight);
    return containerWidth;
  }

  /**
   * Get container height in box sizing mode.
   *
   * @returns {number}
   */
  function getContainerH() {
    var computedStyle = getComputedStyle(containerEl),
        containerHeight = containerEl.clientHeight;

    containerHeight -= parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);
    containerHeight -= parseFloat(computedStyle.marginTop) + parseFloat(computedStyle.marginBottom);
    return containerHeight;
  }

  function getViewportW() {
    return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
  }

  function getViewportH() {
    return window.innerHeight || document.documentElement.clientHeight || document.body.clientWidth;
  }

  return {
    init: function init() {
      _init();
    },
    deinit: function deinit() {}
  };
}(jQuery);
'use strict';

(function ($, window) {
  paper.install(window);

  $(function () {
    if ($('#canvas-container').length) {
      quiltCanvas.init();
    }
    theme.init();
    invite.init();
    create.init();
    sharePatch.init();
  });
})(jQuery, window);
//# sourceMappingURL=maps/quilt.js.map
